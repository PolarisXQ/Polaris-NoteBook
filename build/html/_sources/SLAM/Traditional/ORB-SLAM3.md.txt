## ORB（Oriented FAST + Rotated BRIEF） Feature Extraction


__步骤:__
![](../pic/step_orb_ext.png)
1. 输入图像，并对输入图像进行预处理，将其转换成灰度图像；

2. 初始化参数，包括特征点数量nfeatures，尺度scaleFactor，金字塔层数nlevel，初始阈值iniThFAST，最小阈值minThFAST等参数；

3. 计算金字塔图像，源码中使用8层金字塔，尺度因子为1.2，则通过对原图像进行不同层次的resize，可以获得8层金字塔的图像；
~~~
FAST特征点和ORB描述子本身不具有尺度信息，ORBextractor通过构建图像金字塔来得到特征点尺度信息.将输入图片逐级缩放得到图像金字塔,金字塔层级越高,图片分辨率越低,ORB特征点越大.
~~~

4. 计算特征点：

    * 将图像分割成网格，每个网格大小为W*W=30*30像素；
    * 遍历每个网格；
    * 对每个网格提取FAST关键点，先用初始阈值iniThFAST提取，若提取不到关键点，则改用最小阈值minThFAST提取。（注意，初始阈值一般比最小阈值大）

5. 对所有提取到的关键点利用八叉树的形式进行划分：

    * 为了使得分布更加均匀
    * 按照像素宽和像素高的比值作为初始的节点数量，并将关键点坐标落在对应节点内的关键点分配入节点中；
    * 根据每个节点中存在的特征点数量作为判断依据，如果当前节点只有1个关键点，则停止分割。否则继续等分成4份；
    * 按照上述方法不断划分下去，如图3所示，可见出现一个八叉树的结构，终止条件是节点的数目Lnode大于等于要求的特征点数量nfeatures；
    * 对满足条件的节点进行遍历，在每个节点中保存响应值最大的关键点，保证特征点的高性能；

6. 对上述所保存的所有节点中的特征点计算主方向，利用灰度质心的方法计算主方向，上一讲中我们已经讲解过方法，这讲就不再赘述了；

7. 对图像中每个关键点计算其描述子，值得注意的是，为了将主方向融入BRIEF中，在计算描述子时，ORB将pattern进行旋转，使得其具备旋转不变性；(随便理解一下把)

## Feature Matching

__步骤：__
1. 对新来的帧进行特征提取
2. 将特征依据字典树转换成BOW向量
3. 在匹配时我们查找两帧BOW向量中相同ID的词汇，特征匹配只在有相同ID的词汇中进行。显然，这个过程限定了匹配范围，可以提高匹配的速度。当然，匹配的精度跟词汇树的大小和深度有关系。

### 词袋模型
- 字典是预先准备的。
- 优点在于：
    * 把图片抽象成了几个单词的集合，在数学上用向量就可以简单表示，称为BOW向量。
    * 准备字典时，把单词通过多层聚类的方法进行分类，通过树进行索引，这个检索过程能达到对数级别的查找效率。

### 确定最优匹配？？？？

　　ORBSLAM2中将360°分成30个bin，每个bin的范围是12°。对于图像1和图像2任意两个对应匹配特征，我们计算其二者主方向的夹角。根据夹角的大小确定在哪个角度范围里，并将特征索引存入对应bin中。

　　我们统计每个bin中保存的索引数量，取数量最多的前三个bin作为最终的匹配对结果。其他的匹配对全部予以删除。至此，我们的最优匹配就全部确定了。

　　不过，值得注意的是，我们实际上匹配的点只是一部分，另一部分没有匹配到的，在后面会通过共试图关键帧以及局部地图重投影进行进一步匹配，我们会在后续的内容中讲解。

## Motion Estimation

### 在跟踪过程主要分为三种类型，来确定优化的初始值：
![](../pic/motion_est.png)
1. 无运动模型的跟踪，即基于参考帧的跟踪；
2. 基于匀速运动模型的跟踪；
    　ORBSLAM2中每次跟踪成功后，都会将两帧间的相对运动记录下来作为运动模型。在估计下一帧运动时，将前一帧的姿态，乘上这个运动模型，就得到了当前帧的姿态初值。
3. 重定位(需要用到回环检测)；
        
### 优化方法PNP
PNP是一种将匹配点从三维空间投影到像平面并与观测数据计算误差来估计相机运动的方法，我们也管这种方法叫重投影误差。
使用重投影（与观测的）误差，通过优化的算法解的使得误差最小的运动矩阵,作为运动估计。

基于解析的PNP方法:
1. 只采用少量的匹配对即可估计相对运动;
2. SLAM问题当中，通常约束条件较多，因此基于解析的方法通常不能更好地利用约束条件;
3. 若将错误匹配对纳入解析方程中，会错误估计相机运动
4. 尽管可以通过随机选取多组匹配对进行估算多个相机运动并根据一定条件进行筛选出最合适的相机运动，但是笔者更倾向于用PNP解析解估算出一个初值;
5. 值得一提的是，ORBSLAM2并不用PNP求初值，而是直接用参考帧的运动作为当前帧的运动初值进行优化;

<span style="color:green;">人生苦短，证明就略过把😎</span>

反正最后得到了误差对运动矩阵的导数式，然后就可以用g2o或者ceres来求解最小误差（最小二乘法）的运动矩阵了。

#### 关于优化算法
        1. 梯度下降法：

        · 只考虑了该点是否在下降

        · 实际上，由于梯度下降法过于贪心，通常会导致锯齿状下降，导致收敛速度缓慢；而且会陷入局部最优或者鞍点问题

        2. 牛顿法：

        · 不仅参考了一点的导数，还参考了导数的导数；考虑了下降后这个方向是不是依然在下降，可以优化梯度下降法中最终可能找到鞍点等错误的点的情况。

        · 而牛顿法尽管使用了二阶近似，提高了下降速度，但对于SLAM问题而言，求解海塞阵的计算量太大，非常不适用；

        ！！！！以下还没读懂！！！！！
        -----------------------------------

        3. 高斯牛顿法：

        　　基于牛顿法改进的高斯牛顿法，通过二次近似二阶泰勒展开，利用雅克比的二次方来近似海塞阵，在计算量和下降速度上可以较好满足SLAM的需求，但存在的隐患是增量的范围超出泰勒展开时限定的微小邻域，导致近似失败；

        4. 列文伯格-马夸尔特法：

        　　列文伯格-马夸尔特法是基于高斯牛顿法进一步改进的，通过限定搜索区域，防止出现近似失败的情况，LM方法也是SLAM中最常用的优化方法。

        -----------------------------------


## <span style="color:green;">KeyFrame</span>

关键帧的目的在于，适当地降低信息冗余度，减少计算机资源的损耗，保证系统的平稳运行

### <span style="color:green;">KF's Selection</span>

1. 若当前处于定位模式，不插入关键帧；

原因：定位模式是只定位不建图，只利用已有的地图点对当前相机姿态进行估计，而不更新地图点，因此没有插入关键帧的必要。

2. 若局部地图处于全局闭环情况下，不插入关键帧；

原因：局部地图被占用，插入关键帧会影响全局闭环的优化。

3. 若距离上一次重定位较近，不插入关键帧；

原因：重定位时，当前帧通过与局部关键帧匹配并进行运动估计，能够很好地恢复其运动姿态。笔者认为，因为重定位时当前帧与重定位候选帧的信息冗余度较低，所以在重定位成功后，当前帧会作为关键帧插入地图中。而新来的一帧，由于重定位时刚刚插入关键帧，所以不需要频繁插入。

### <span style="color:green;">KF's Insertation</span>

排除了上面三种情况，接下来就需要对关键帧进一步检测，才能确定是否真的需要插入关键帧。进一步检查包含一个必不可少的条件和另外三选一的条件。

## 地图的更新策略

如何插入新的关键帧和地图点，同样，怎么剔除多余的关键帧和没用的地图点

###  共视图关键帧

遍历当前帧所有地图点,已有共同观测的地图点，则更新观测信息和地图点???；没有共同观测的，则临时存储；将共同观测数量大于15的关键帧加入共视图中，若无满足条件的，则将共同观测数量最多的关键帧加入共视图中，并取共同观测数量最大的作为当前帧的父节点。

###  剔除地图点

应该被看到却没被看到的；被看到的太少的；刚建出来就不见的。

在剔除了不满足要求的地图点后，剩下的地图点都是要插入地图的

## 地图点MapPoint

特征点为2d的，是相机拍摄到的点
地图点是3d的，是根据同一个特征点在多个地图中不同的位置三角化得到的


## 回环检测

### 位置识别

利用一范数来度量当前帧与共视图关键帧之间的相似度分数，将所有相似分数进行排序，取最小的匹配分数 Smin
 作为参考值，用于查找回环候选帧。然后排除当前帧共视图的所有关键帧,